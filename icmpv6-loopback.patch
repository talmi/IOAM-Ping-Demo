diff --git a/include/uapi/linux/icmpv6.h b/include/uapi/linux/icmpv6.h
index ecaece3af..0ead02024 100644
--- a/include/uapi/linux/icmpv6.h
+++ b/include/uapi/linux/icmpv6.h
@@ -143,6 +143,11 @@ struct icmp6hdr {
 /* Codes for EXT_ECHO (PROBE) */
 #define ICMPV6_EXT_ECHO_REQUEST		160
 #define ICMPV6_EXT_ECHO_REPLY		161
+
+/* Codes for LOOP_ECHO (LOOPBACK) */
+#define ICMPV6_LOOP_ECHO_REQUEST	200
+#define ICMPV6_LOOP_ECHO_REPLY		201
+
 /*
  *	constants for (set|get)sockopt
  */
diff --git a/net/ipv4/ping.c b/net/ipv4/ping.c
index 823306487..a628330af 100644
--- a/net/ipv4/ping.c
+++ b/net/ipv4/ping.c
@@ -478,7 +478,8 @@ static inline int ping_supported(int family, int type, int code)
 	return (family == AF_INET && type == ICMP_ECHO && code == 0) ||
 	       (family == AF_INET && type == ICMP_EXT_ECHO && code == 0) ||
 	       (family == AF_INET6 && type == ICMPV6_ECHO_REQUEST && code == 0) ||
-	       (family == AF_INET6 && type == ICMPV6_EXT_ECHO_REQUEST && code == 0);
+	       (family == AF_INET6 && type == ICMPV6_EXT_ECHO_REQUEST && code == 0) ||
+	       (family == AF_INET6 && type == ICMPV6_LOOP_ECHO_REQUEST && code == 0);
 }
 
 /*
diff --git a/net/ipv6/icmp.c b/net/ipv6/icmp.c
index 1635da072..46a9deb61 100644
--- a/net/ipv6/icmp.c
+++ b/net/ipv6/icmp.c
@@ -724,6 +724,8 @@ static enum skb_drop_reason icmpv6_echo_reply(struct sk_buff *skb)
 	struct ipcm6_cookie ipc6;
 	u32 mark = IP6_REPLY_MARK(net, skb->mark);
 	SKB_DR(reason);
+	struct ipv6hdr *hdr = ipv6_hdr(skb);
+	u32 len = skb->len;
 	bool acast;
 	u8 type;
 
@@ -743,6 +745,8 @@ static enum skb_drop_reason icmpv6_echo_reply(struct sk_buff *skb)
 
 	if (icmph->icmp6_type == ICMPV6_EXT_ECHO_REQUEST)
 		type = ICMPV6_EXT_ECHO_REPLY;
+	else if (icmph->icmp6_type == ICMPV6_LOOP_ECHO_REQUEST)
+		type = ICMPV6_LOOP_ECHO_REPLY;
 	else
 		type = ICMPV6_ECHO_REPLY;
 
@@ -800,15 +804,27 @@ static enum skb_drop_reason icmpv6_echo_reply(struct sk_buff *skb)
 		if (!icmp_build_probe(skb, (struct icmphdr *)&tmp_hdr))
 			goto out_dst_release;
 
+	if (icmph->icmp6_type == ICMPV6_LOOP_ECHO_REQUEST) {
+		msg.offset = skb_network_offset(skb);
+		len = skb->len - msg.offset;
+		len = min_t(unsigned int, len, IPV6_MIN_MTU -
+			    sizeof(struct ipv6hdr) - sizeof(struct icmp6hdr));
+		if (len < 0) {
+			net_dbg_ratelimited("icmp: len problem [%pI6c > %pI6c]\n",
+					    &hdr->saddr, &hdr->daddr);
+			goto out_dst_release;
+		}
+	}
+
 	if (ip6_append_data(sk, icmpv6_getfrag, &msg,
-			    skb->len + sizeof(struct icmp6hdr),
+			    len + sizeof(struct icmp6hdr),
 			    sizeof(struct icmp6hdr), &ipc6, &fl6,
 			    (struct rt6_info *)dst, MSG_DONTWAIT)) {
 		__ICMP6_INC_STATS(net, idev, ICMP6_MIB_OUTERRORS);
 		ip6_flush_pending_frames(sk);
 	} else {
 		icmpv6_push_pending_frames(sk, &fl6, &tmp_hdr,
-					   skb->len + sizeof(struct icmp6hdr));
+					   len + sizeof(struct icmp6hdr));
 		reason = SKB_CONSUMED;
 	}
 out_dst_release:
@@ -935,6 +951,7 @@ static int icmpv6_rcv(struct sk_buff *skb)
 
 	switch (type) {
 	case ICMPV6_ECHO_REQUEST:
+	case ICMPV6_LOOP_ECHO_REQUEST:
 		if (!net->ipv6.sysctl.icmpv6_echo_ignore_all)
 			reason = icmpv6_echo_reply(skb);
 		break;
@@ -945,6 +962,7 @@ static int icmpv6_rcv(struct sk_buff *skb)
 		break;
 
 	case ICMPV6_ECHO_REPLY:
+	case ICMPV6_LOOP_ECHO_REPLY:
 		reason = ping_rcv(skb);
 		break;
 
